@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Common
@model IEnumerable<EntityLayer.Blog>

@{
    ViewData["Title"] = "Home Page";
}

@Html.Partial("SearchForm")
 
@{
    <h1 style="text-align: center;"> 
        @Html.ActionLink(TempData["categoryName"].ToString(), "BlogsByCategory", "Blog", new { id = TempData["categoryId"] })
    </h1>
    @if(Model.Any())
    foreach (var item in Model)
    {
        <div class="row tm-row">

            <article class="col-12 col-md-6 tm-post">
                <hr class="tm-hr-primary">
                <a href="/Blog/Post/@item.BlogId" class="effect-lily tm-post-link tm-pt-60">
                    <div class="tm-post-link-inner">
                        <img src="@item.BlogImg" alt="Image" class="img-fluid">
                    </div>
                    <!--<span class="position-absolute tm-new-badge">New</span>-->
                    <h2 class="tm-pt-30 tm-color-primary tm-post-title">@item.BlogTitle</h2>
                </a>
                @{
                    string content;
                    if (item.BlogContent.Length < 200)
                    {
                        content = item.BlogContent.Substring(0, item.BlogContent.Length);
                        <p class="tm-pt-30">@content</p>
                    }
                    else
                    {
                        content = item.BlogContent.Substring(0, 200);
                        <p class="tm-pt-30">@content...</p>
                        <a href="/Blog/Post/@item.BlogId">Devamını oku</a>
                    }
                }
                <div class="d-flex justify-content-between tm-pt-45">
                    @await Component.InvokeAsync("CategoryByBlog", item.CategoryId)
                    <span class="tm-color-primary">@(((DateTime)item.BlogDate).ToString("dd-MMM-yyyy"))</span>
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                    @await Component.InvokeAsync("CommentCount", item.BlogId)
                    @await Component.InvokeAsync("AuthorByBlog", item.AuthorId)
                </div>
            </article>
        </div>
    }
    @Html.PagedListPager((IPagedList)Model, page => Url.Action("Index", new { page }), new X.PagedList.Web.Common.PagedListRenderOptions
        {
            LiElementClasses = new string[] { "tm-paging-item" },
            PageClasses = new string[] { "tm-paging-link" }
        })
}
@Html.Partial("Footer")